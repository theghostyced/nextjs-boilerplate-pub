const fs = require('fs');
const path = require('path');
const {camelCase: toCamelCase} = require('lodash');

const dirToWatch = 'src/components/modules';
const adapterFile = 'src/components/moduleImports.ts';
console.log(`ðŸ‘€ Watching the ${dirToWatch}...`);

/**
 * Run a watcher on the `modules` dir within `src/components/modules`.
 * Once a new folder is added within the `modules` dir path, we update the
 * adapters.ts file to export it.
 */
fs.watch(dirToWatch, (eventType, filename) => {
  if (eventType === 'rename') {
    const folders = fs
      .readdirSync(dirToWatch)
      .filter((file) => fs.statSync(path.join(dirToWatch, file)).isDirectory());

    console.log('Folders within the codebase:', folders);
    let content = '/** THIS FILE IS AUTOGENERATED. DO NOT ATTEMPT TO EDIT IT!*/ \n\n';
    folders.forEach((folder) => {
      content += `export {default as ${toCamelCase(
        folder,
      )}} from "./modules/${folder}/${folder}";\n`;
    });

    console.log('Content to write to the Adapters file:', content);

    fs.writeFileSync(adapterFile, content);
  }
});
